import express from 'express'
import {
    SH_DICT, ADDR_DICT_CITIES, ADDR_DICT_USER_CONF, ADDR_STK_DATA, COL_STK_ARTICUL,
    COL_STK_COLOUR, COL_STK_MODEL, COL_STK_MODEL_AND_COLOUR, COL_STK_PRICE_MANY,
    COL_STK_PRICE_ONE, COL_STK_SIZE_L, IND_USER_CONF_MSG_AVAIL, MAX_POSITION_IN_ORDER,
    MAX_QTY_IN_POSITION, SIZES, RELOAD_STK_MS, SH_STK, COL_STK_SEASON, CODE_UA,
    MSG_CLEAR, MSG_AVAIL, MSG_NEW_ORDER, DELIV_TYPE_NP, DELIV_TYPE_NP_POD,
    DELIV_TYPE_UP, NP_METHOD_DOOR, MSG_ADD_POSITION, MSG_SEND
} from './config/constants'
import {
    isValidPhonePartner, isClientNameValid, isValidNPmethod, isClientPhoneValid,
    isNpWhValid, isUpIndexValid, isItemValid, isSizeValid, isQtyValid, isLegalInputForRegExp
} from './validation/validation'
import {
    composeAuthButtons, composeInitButtons, composeButtonsFromArray, composeButtonsMethodNP,
    composeQtyButtons, composeSizeButtons, composeTypeButtons, composOrderConfirmButtons
} from './candidate_for_deletion/compositor'
import {
    convert2DimArrayInto1Dim, filterArray, indexOfIgnoringCase, makeFirstLetterCapital
} from './utils/service'
import {generateOrderId} from "./candidate_for_deletion/util"
import configMode from "./config/config"
import TblBooking from "./google-sheet/models/TblBooking"
import TblBotManager from "./google-sheet/models/TblBotManager"
import {Response} from "express-serve-static-core"
import {sendMessage} from "./bot/bot"
import {states} from "./states";
import {actionHelp} from "./stages/help";
import {TELEGRAM_SUPPORT} from "./stages/common";
import {users} from "./Users";
import logger from "./utils/logger";

export const CONF = {skip_validation: true}


const app = express()

app.use(express.json())
app.use(express.urlencoded({extended: true}))
app.use(express.static('public'))

const ctx = {
    'reload_stk_last_date': new Date()
}

function msgCancelOrder() {
    return '\n\nüõëüîô  –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –Ω–∞—á–∞–ª—É: ' + states.HOME
}

export const msgGoToHome = () => {
    return '\n\nüîô  –ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ' + states.HOME
}

app.get('/', async (_req, res) => {
    res.send('App is working now')
})

app.post('/reload', async (_rec, res) => {
    await reloadUserConfByExternalRequest()
    res.json({status: 'ok'})
})

app.post('/updateImagesOnServer', (_rec, res) => {
    //await updateImagesOnServerOLD()
    res.json({status: 'ok'})
})

app.post('/new-message', async (req, res): Promise<Response | undefined> => {
    const message = req.body?.message ?? req.body?.edited_message
    const phonePartner = message?.contact?.phone_number?.trim()
    const photo = message?.photo ? message.photo[0] : null
    const chatId: string = message?.chat?.id ?? ''
    let user = users.getUserByChatId(chatId)
    let messageText = message?.text?.trim()
    logger.info('====================')
    logger.info(JSON.stringify(req.body))
    logger.info('====================')
    if ((!messageText && !phonePartner && !photo) || !chatId) {
        return res.sendStatus(400)
    }

    let actState

    switch (messageText) {
        case MSG_CLEAR:
        case states.HOME:
            actState = states.HOME
            break
        case states.HELP:
            actState = states.HELP
            break
        case states.ABOUT:
            actState = states.ABOUT
            break
        case MSG_AVAIL:
            actState = states.AVAIL
            break
        case MSG_NEW_ORDER:
        case states.NEW:
            actState = states.NEW
            break
        default:
            if (!user?.state) {
                actState = states.HOME
            } else {
                actState = user.state
            }
    }

    logger.log({actState, messageText})

    switch (actState) {
        case states.HELP :
            user = {state: states.HELP}
            await actionHelp(chatId)
            break

        case states.ABOUT:
            user = {state: states.ABOUT}
            let msgAbout = '–ú—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω "–°–¢–ò–õ–¨–ù–ê–Ø –û–ë–£–í–¨" - —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ñ–ï–ù–°–ö–û–ô –∫–æ–∂–∞–Ω–æ–π –æ–±—É–≤–∏.\n' +
                'üåé–°–∞–π—Ç: https://oba.com.ua\n' +
                'üèÜTelegram: https://t.me/artshoesua\n' +
                'ü§≥Instagram: https://www.instagram.com/artshoes.ua/\n' +
                'üîé–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å—ã–ª–æ–∫: ' + process.env.URL_TTN +
                msgGoToHome()
            await sendMessage(chatId, msgAbout)
            break

        case states.AVAIL:
            user = {state: states.AVAIL}
            if (messageText === MSG_AVAIL) {
                await extractDataFromTableOrCache(true)
                await sendMessage(
                    chatId,
                    '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (5 —Ü–∏—Ñ—Ä) –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–æ–¥–µ–ª—å-—Ü–≤–µ—Ç: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–µ –ø–æ–¥—Ä—è–¥)' +
                    msgGoToHome()
                )
            } else {
                await extractDataFromTableOrCache()
                const MAX_ITEMS_LISTED = 50
                let dictItems
                let isArticul
                if (messageText.match('^[0-9]{5}$')) {
                    dictItems = getArrFromStock(COL_STK_ARTICUL)
                    isArticul = true
                } else {
                    dictItems = getArrFromStock(COL_STK_MODEL_AND_COLOUR)
                    isArticul = false
                }
                let item = messageText.toLowerCase()
                if (!isLegalInputForRegExp(item)) {
                    await sendMessage(chatId, '–ù–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥' + msgGoToHome())
                    return undefined
                }
                let actInd = indexOfIgnoringCase(dictItems, item)
                if (actInd === -1) {
                    let found = filterArray(dictItems, item, true)
                    let sizeFound = found?.length
                    if (!found || sizeFound === 0) {
                        let msgNotFound = isArticul
                            ? '–í–≤–µ–¥–µ–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª \'' + item + '\' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥'
                            : '–í–≤–µ–¥–µ–Ω—ã–π —Ç–µ–∫—Å—Ç \'' + item +
                            '\' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ. –ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥'
                        await sendMessage(chatId, msgNotFound + msgGoToHome())
                    } else if (sizeFound > MAX_ITEMS_LISTED) {
                        await sendMessage(chatId, '–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. ' +
                            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥' + msgGoToHome())
                    } else {
                        await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–∞–π–¥–µ–Ω–æ ' +
                            sizeFound + ')',
                            composeButtonsFromArray(found))
                    }
                } else {
                    let tuple = arrStk[actInd]
                    let actArt = tuple[COL_STK_ARTICUL - 1]
                    if (
                        actArt !== item &&
                        tuple[COL_STK_MODEL_AND_COLOUR - 1] !== item
                    ) {
                        await extractDataFromTableOrCache(true).then(
                            () => sendMessage(chatId, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä', composeButtonsFromArray([item]))
                        )
                    }
                    let avail = ''
                    SIZES.forEach(
                        (size, i) =>
                            avail += tuple[COL_STK_SIZE_L - 1 + i] > 0
                                ? '\n' + '   ‚úì' + size + ':  ' + tuple[COL_STK_SIZE_L - 1 + i]
                                : ''
                    )
                    let msgWhenPhotoExist = arrImg.includes(actArt)
                        ? '<a href="' + configMode.app.url + '/images/' + actArt + '.jpg' + '"> ‚Äè </a>'
                        : ''
                    let msg = actArt + '\n' +
                        tuple[COL_STK_MODEL - 1] + ' (' + tuple[COL_STK_COLOUR - 1] + ')' +
                        (avail || '\n–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏') + '\n' +
                        '–¶–µ–Ω–∞ ' + tuple[COL_STK_PRICE_ONE - 1] + ' / ' + tuple[COL_STK_PRICE_MANY - 1] + ' –≥—Ä–Ω' + '\n' +
                        '–°–µ–∑–æ–Ω ' + tuple[COL_STK_SEASON - 1].toLowerCase() + '\n' +
                        userConf[IND_USER_CONF_MSG_AVAIL] +
                        msgWhenPhotoExist +
                        msgGoToHome()
                    await sendMessage(chatId, msg, {parse_mode: 'HTML'})
                }
            }
            break

        case states.HOME:
            user = {state: states.HOME}
            let msgHome = '‚òÄ–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ Telegram-–±–æ—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∏–ª—å–Ω–æ–π –∂–µ–Ω—Å–∫–æ–π –æ–±—É–≤–∏.\n' +
                '‚ùì–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ' + states.HELP + '\n' +
                'üíÅ–ü–æ–¥–¥–µ—Ä–∂–∫–∞: ' + TELEGRAM_SUPPORT + '\n' +
                '‚Ñπ–ü—Ä–æ –∫–æ–º–ø–∞–Ω–∏—é: ' + states.ABOUT +
                msgGoToHome()
            await sendMessage(chatId, msgHome, composeInitButtons())
            break

        case states.NEW:
            user = {state: states.PHONE_PARTNER, order: null}
            await sendMessage(chatId, '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø–æ–ª–æ–≥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:\n' +
                ' - –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞;\n' +
                ' - —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã;\n' +
                ' - —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ (–ù–æ–≤–∞—è –ü–æ—á—Ç–∞/–£–∫—Ä–ø–æ—à—Ç–∞) –∏ –º–µ—Ç–æ–¥ (–æ—Ç–¥–µ–ª–µ–Ω–∏–µ/–ø–æ—á—Ç–æ–º–∞—Ç/–¥–≤–µ—Ä–∏) –¥–ª—è –ù–æ–≤–æ–π –ü–æ—á—Ç—ã;\n' +
                ' - –≥–æ—Ä–æ–¥ –∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ/–ø–æ—á—Ç–æ–º–∞—Ç –ù–æ–≤–æ–π –ü–æ—á—Ç—ã;\n' +
                ' - –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø—Ä–∏ –∞–¥—Ä–µ—Å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã;\n' +
                ' - –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –£–∫—Ä–ø–æ—à—Ç–æ–π;\n' +
                ' - –∞—Ä—Ç–∏–∫—É–ª, —Ä–∞–∑–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ ' + MAX_POSITION_IN_ORDER + ' –ø–∞—Ä.)\n\n' +
                '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                composeAuthButtons())
            break

        case states.PHONE_PARTNER:
            if (!isValidPhonePartner(phonePartner)) {
                await sendMessage(chatId, '–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. ' +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã–π –Ω–æ–º–µ—Ä.\n' +
                    '–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É ' +
                    TELEGRAM_SUPPORT + msgCancelOrder())
            } else {
                user.order = {}
                user.order.phonePartner = phonePartner.substring(1)
                user.state = states.DELIV_TYPE
                await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', composeTypeButtons())
            }
            break

        case states.DELIV_TYPE:
            switch (messageText) {
                case DELIV_TYPE_NP:
                    user.order.delivType = DELIV_TYPE_NP
                    break
                case DELIV_TYPE_NP_POD:
                    user.order.delivType = DELIV_TYPE_NP_POD
                    break
                case DELIV_TYPE_UP:
                    user.order.delivType = DELIV_TYPE_UP
                    break
                /*case DELIV_TYPE_OTHER:
                    user.order.delivType = null
                    break*/
                default:
                    await sendMessage(chatId, '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö' +
                        msgCancelOrder(), composeTypeButtons())
            }
            user.state = states.PHOTO_PAYM
            await sendMessage(chatId, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–ø–ª–∞—Ç—ã')
            break

        case states.PHOTO_PAYM:
            /*if (!await isValidPhotoPaym(photo)) {
                 await sendMessage(chatId,
                     '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–ø–ª–∞—Ç—ã (–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ –≤–∏–¥–µ —Å–∫—Ä–µ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é)' +
                     TELEGRAM_SUPPORT + msgCancelOrder())
             }*/
            switch (user.order.delivType) {
                case DELIV_TYPE_NP:
                case DELIV_TYPE_NP_POD:
                    user.state = states.NP_METHOD
                    await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã', composeButtonsMethodNP())
                    break
                case DELIV_TYPE_UP:
                    user.state = states.CLIENT_NAME
                    await sendMessage(chatId, '–§–∞–º–∏–ª–∏—è –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (2 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)')
                    break
                /*case DELIV_TYPE_OTHER:
                    user.state = states.ITEM
                    await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
                    break*/
                default:
                    await sendMessage(chatId, '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö' +
                        msgCancelOrder(), composeTypeButtons())
            }
            break

        case states.NP_METHOD:
            if (!isValidNPmethod(messageText)) {
                await sendMessage(chatId, '–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö' +
                    msgCancelOrder(), composeButtonsMethodNP())
            } else {
                user.order.npMethod = messageText
                user.state = states.CLIENT_NAME
                let msg = messageText === NP_METHOD_DOOR
                    ? '–§–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–∞ (3 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)'
                    : '–§–∞–º–∏–ª–∏—è –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (2 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)'
                await sendMessage(chatId, msg)
            }
            break

        case states.CLIENT_NAME:
            let nameClient = makeFirstLetterCapital(messageText)
            if (!isClientNameValid(nameClient, user.order.npMethod)) {
                let msg = user.order.npMethod === NP_METHOD_DOOR
                    ? '–§–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–∞ (3 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).'
                    : '–§–∞–º–∏–ª–∏—è –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (2 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).'
                msg += ' —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—á–Ω—ã–µ'
                await sendMessage(chatId, '–ò–º—è ' + nameClient + ' –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    msg + msgCancelOrder())
            } else {
                user.order.nameClient = nameClient
                user.state = states.CLIENT_PHONE
                await sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 067*******, 10 —Ü–∏—Ñ—Ä')
            }
            break

        case states.CLIENT_PHONE:
            if (!isClientPhoneValid(messageText)) {
                await sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω ' + messageText + ' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 067*********: 10 —Ü–∏—Ñ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤' +
                    msgCancelOrder())
            } else {
                user.order.phoneClient = CODE_UA + messageText
                if (user.order.delivType === DELIV_TYPE_UP) {
                    user.state = states.UP_INDEX
                    await sendMessage(chatId, '–ò–Ω–¥–µ–∫—Å')
                } else {
                    user.state = states.NP_CITY
                    await sendMessage(chatId, '–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ ' +
                        '(–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤)')
                }
            }
            break

        case states.NP_CITY:
            const MAX_CITIES_LISTED = 15
            let city = makeFirstLetterCapital(messageText)
            if (!isLegalInputForRegExp(city)) {
                await sendMessage(chatId, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥' +
                    msgCancelOrder())
                return undefined
            }
            const retrievedCities = await retrieveCities()
            if (indexOfIgnoringCase(retrievedCities, city) === -1) {
                let found = filterArray(retrievedCities, city)
                let sizeFound = found?.length
                if (!found || sizeFound === 0) {
                    await sendMessage(chatId, '–í–≤–µ–¥–µ–Ω—ã–π —Ç–µ–∫—Å—Ç \'' + city +
                        '\' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ. –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥' +
                        msgCancelOrder())
                } else if (sizeFound > MAX_CITIES_LISTED) {
                    await sendMessage(chatId, '–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. ' +
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥' + msgCancelOrder())
                } else {
                    await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–∞–π–¥–µ–Ω–æ ' +
                        sizeFound + ')',
                        composeButtonsFromArray(found))
                }
            } else {
                user.order.npCity = city
                if (user.order.npMethod === NP_METHOD_DOOR) {
                    user.state = states.NP_STREET
                    await sendMessage(chatId, '–£–ª–∏—Ü–∞ (–Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)')
                } else {
                    user.state = states.NP_WH
                    await sendMessage(chatId,
                        '–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è/–ø–æ—á—Ç–æ–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                }
            }
            break

        case states.NP_WH:
            if (!isNpWhValid(messageText)) {
                await sendMessage(chatId, '–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è/–ø–æ—á—Ç–æ–º–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ' + msgCancelOrder())
            } else {
                user.order.npWh = messageText
                user.state = states.ITEM
                await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
            }
            break

        case states.NP_STREET:
            user.order.npStreet = messageText
            user.state = states.NP_HOUSE
            await sendMessage(chatId, '–î–æ–º')
            break

        case states.NP_HOUSE:
            user.order.npHouse = messageText
            user.state = states.NP_FLAT
            await sendMessage(chatId, '–ö–≤–∞—Ä—Ç–∏—Ä–∞')
            break

        case states.NP_FLAT:
            user.order.npFlat = messageText
            user.state = states.ITEM
            await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
            break

        case states.UP_INDEX:
            if (!isUpIndexValid(messageText)) {
                await sendMessage(chatId, '–ò–Ω–¥–µ–∫—Å ' + messageText +
                    ' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' + '–ò–Ω–¥–µ–∫—Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –£–∫—Ä–ø–æ—à—Ç—ã: 5 —Ü–∏—Ñ—Ä.\n' +
                    '–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É ' +
                    TELEGRAM_SUPPORT + msgCancelOrder())
            } else {
                user.order.upIndex = messageText
                user.state = states.ITEM
                await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
            }
            break

        case states.ITEM:
            if (!isItemValid(messageText, arrStk)) {
                await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª ' + messageText + ' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (5 —Ü–∏—Ñ—Ä)' + msgCancelOrder())
            } else {
                let pos = user.order.pos ?? 0
                pos++
                user.order.pos = pos
                user.order['item' + pos] = messageText
                user.state = states.SIZE
                await sendMessage(chatId, '–†–∞–∑–º–µ—Ä', composeSizeButtons())
            }
            break

        case states.SIZE:
            let size = parseInt(messageText)
            if (!isSizeValid(size, SIZES)) {
                await sendMessage(chatId, '–†–∞–∑–º–µ—Ä ' + size + ' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–†–∞–∑–º–µ—Ä (—á–∏—Å–ª–æ –æ—Ç ' + SIZES[0] + ' –¥–æ ' + SIZES[SIZES.length - 1] + ')' +
                    msgCancelOrder(), composeSizeButtons())
            } else {
                let pos = user.order.pos
                user.order['size' + pos] = size
                user.state = states.QTY
                await sendMessage(chatId, '–ö–æ–ª-–≤–æ', composeQtyButtons(MAX_QTY_IN_POSITION))
            }
            break

        case states.QTY:
            let qty = parseInt(messageText)
            if (!isQtyValid(qty, MAX_QTY_IN_POSITION)) {
                await sendMessage(chatId,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ' + qty + ' –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ ' + MAX_QTY_IN_POSITION + msgCancelOrder(),
                    composeQtyButtons(MAX_QTY_IN_POSITION))
            } else {
                let pos = user.order.pos
                user.order['qty' + pos] = qty
                user.state = states.SEND
                if (pos === MAX_POSITION_IN_ORDER) {
                    await sendMessage(chatId, '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?',
                        composOrderConfirmButtons())
                } else {
                    await sendMessage(chatId, '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?',
                        composOrderConfirmButtons(true))
                }
            }
            break

        case states.SEND:
            switch (messageText) {
                case MSG_ADD_POSITION:
                    user.state = states.ITEM
                    await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
                    break
                case MSG_SEND:
                    user.state = states.CREATED
                    let dt = new Date()
                    user.order.createdAt = dt
                    let orderId = generateOrderId(user, dt)
                    user.order.orderId = orderId
                    let orders = user.orders ?? []
                    orders.push(user.order)
                    user.orders = orders
                    logger.debug(JSON.stringify(user))
                    await sendMessage(chatId, orderId + '\n–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n' +
                        '–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ (–∫—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π) ' +
                        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–ª–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n' +
                        '–í–∞–∂–Ω–æ: –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É ' +
                        TELEGRAM_SUPPORT + ' –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –∑–∞–∫–∞–∑–∞!' + msgGoToHome())
                    //await placeOrder(docMain, user.order)
                    break
                case MSG_CLEAR:
                    user.state = states.HOME
                    await sendMessage(chatId, '–ó–∞–∫–∞–∑ —Å–±—Ä–æ—à–µ–Ω' + msgGoToHome())
                    break
                default:
                    let pos = user.order.pos
                    if (pos === MAX_POSITION_IN_ORDER) {
                        await sendMessage(chatId, '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?' +
                            msgCancelOrder(), composOrderConfirmButtons())
                    } else {
                        await sendMessage(chatId, '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?' +
                            msgCancelOrder(), composOrderConfirmButtons(true))
                    }
            }
            break

        default:
            logger.log('default for messageText ' + messageText)
            await sendMessage(chatId, '–û—Ç–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' +
                msgGoToHome() + '.\n–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ ' + states.HELP +
                '.\n–ü–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É ' + TELEGRAM_SUPPORT)
    }

    res.send('Done')

    return undefined

})

async function reloadUserConfByExternalRequest() {
    //await wsBooking.reloadInfo()
    await reloadUserConf()
    logger.log('reloaded externally')
}

async function loadDuringStartup() {
    await reloadStk()
    await reloadUserConf()
    //await reloadImg()
}

async function extractDataFromTableOrCache(isForce: boolean = false) {
    let dtNow = new Date()
    if (isForce || dtNow.getTime() - ctx.reload_stk_last_date.getTime() > RELOAD_STK_MS) {
        await wsBooking.reloadInfo()
        await reloadStk()
        ctx.reload_stk_last_date = dtNow
    }
    logger.log('extractDataFromTableOrCache done with reload_stk_last_date = ' + ctx.reload_stk_last_date)
}

async function reloadStk() {
    arrStk = await wsBooking.getDataRangeBySheet(SH_STK, ADDR_STK_DATA)
    logger.log('reloadStk done')
}

/*
export async function reloadImg() {
    const arrImgId = await wsImageScanner.getDataRangeBySheet(SH_IMG, ADDR_IMG_DATA)
        .then((arr: any[]) => arr.filter(
            (row: any[]) => row[IND_IMG_ART] && row[IND_IMG_ART] !== '-'
        )).then(
            (arr: any[]) => uniqueTwoDimArr(arr, IND_IMG_ART)
        )
    arrImg = arrImgId.map((row: any[]) => row[IND_IMG_ART])
    logger.log('reloadImg done with ' + arrImg.length)
    return {arrImgId}
}
*/

async function reloadUserConf() {
    userConf = await wsBooking.getDataRangeBySheet(SH_DICT, ADDR_DICT_USER_CONF)
        .then(arr => convert2DimArrayInto1Dim(arr))
    logger.log('reloadUserConf done ')
}

async function retrieveCities() {
    let cities = await wsBooking.getDataRangeBySheet(SH_DICT, ADDR_DICT_CITIES)
        .then(err => convert2DimArrayInto1Dim(err))
    logger.log('retrieveCities done')
    return cities
}

function getArrFromStock(col: number) {
    let arr = arrStk.map(row => row[col - 1])
    logger.log('getArrFromStock by ' + col)
    return arr
}

let wsBooking: TblBooking
// @ts-ignore
let wsBotManager: TblBotManager
let arrStk: any[][]
let arrImg: any[][]
let userConf: any[][]

const PORT = configMode.app.port

app.listen(PORT, async () => {
    logger.log(JSON.stringify(configMode))
    logger.log(`Server running on port ${PORT}`)
    wsBooking = await TblBooking.createInstance()
    wsBotManager = await TblBotManager.createInstance()
    await loadDuringStartup()
})
