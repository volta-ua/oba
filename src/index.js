import axios from 'axios'
import express from 'express'
import {
    SH_DICT,
    ADDR_DICT_CITIES, ADDR_DICT_USER_CONF, ADDR_IMG_DATA,
    ADDR_STK_DATA,
    COL_STK_ARTICUL, COL_STK_COLOUR, COL_STK_MODEL,
    COL_STK_MODEL_AND_COLOUR, COL_STK_PRICE_MANY,
    COL_STK_PRICE_ONE,
    COL_STK_SISE_L, IND_IMG_ART, IND_USER_CONF_MSG_AVAIL, MAX_POSITION_IN_ORDER, MAX_QTY_IN_POSITION, SH_IMG,
    SIZES, RELOAD_STK_MS, SH_STK, COL_STK_SEASON, CODE_UA
} from './config/constants.js'
import {
    isValidPhonePartner, isClientNameValid, isValidNPmethod, isClientPhoneValid,
    isNpWhValid, isUpIndexValid, isItemValid, isSizeValid, isQtyValid, isValidPhotoPaym,
    isLegalInputForRegExp
} from './validation/validation.js'
import {
    composeAuthButtons, composeInitButtons, composeButtonsFromArray, composeNPmethodButtons,
    composeQtyButtons, composeSizeButtons, composeTypeButtons, composOrderConfirmButtons
} from './proc/compositor.js'
import {placeOrder} from './proc/placeOrder.js'
import {
    convert2DimArrayInto1Dim, filterArray, includesIgnoringCase, makeFirstLetterCapital,
    slice2d, uniqueTwoDimArr
} from './utils/service.js'
import {generateOrderId} from "./proc/util.js"
import configMode from "./config/config.js"
import {updateImagesOnServer} from "./google-drive/updateImagesOnServer.js";
import TblImageScanner from "./google-sheet/models/TblImageScanner.js";
import TblBooking from "./google-sheet/models/TblBooking.js";
import docMain from "google-spreadsheet/lib/GoogleSpreadsheet.js";
import docImg from "google-spreadsheet/lib/GoogleSpreadsheet.js";

export const CONF = {skip_validation: true}
export const MSG_NEW_ORDER = '–°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó'
export const MSG_AVAIL = '–ù–ê–õ–ò–ß–ò–ï –¢–û–í–ê–†–ê'
export const MSG_AUTH = '–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø'
export const MSG_CLEAR = '–û–¢–ú–ï–ù–ê'
export const MSG_ADD_POSITION = '–î–û–ë–ê–í–ò–¢–¨ –ü–û–ó–ò–¶–ò–Æ'
export const MSG_SEND = '–û–¢–ü–†–ê–í–ò–¢–¨'
export const DELIV_TYPE_NP = '–ù–û–í–ê–Ø –ü–û–ß–¢–ê'
export const DELIV_TYPE_NP_POD = '–ù–û–í–ê–Ø –ü–û–ß–¢–ê (–Ω–∞–ª–æ–∂. –ø–ª–∞—Ç–µ–∂)'
export const DELIV_TYPE_UP = '–£–ö–†–ü–û–®–¢–ê'
export const DELIV_TYPE_OTHER = '–ü–†–û–ß–ï–ï'
export const NP_METHOD_WH = '–û–¢–î–ï–õ–ï–ù–ò–ï'
export const NP_METHOD_POST = '–ü–û–ß–¢–û–ú–ê–¢'
export const NP_METHOD_DOOR = '–î–í–ï–†–ò'

const TELEGRAM_URI = `https://api.telegram.org/bot${configMode.bot.TELEGRAM_API_TOKEN}`
const TELEGRAM_URI_SEND_MESSAGE = `${TELEGRAM_URI}/sendMessage`
export const TELEGRAM_URI_FILE = `https://api.telegram.org/file/bot${configMode.bot.TELEGRAM_API_TOKEN}`
export const TELEGRAM_URI_FILE_ID = `${TELEGRAM_URI}/getFile?file_id=`
const TELEGRAM_SUPPORT = process.env.TELEGRAM_SUPPORT

const app = express()

app.use(express.json())
app.use(express.urlencoded({extended: true}))
app.use(express.static('public'))

const ctx = {
    'reload_stk_last_date': new Date()
}

const users = {}

const states = {
    HOME: '/home',
    HELP: '/help',
    ABOUT: '/about',
    AVAIL: '/avail',
    NEW: '/new_order',
    PHONE_PARTNER: 'PHONE_PARTNER',
    DELIV_TYPE: 'DELIV_TYPE',
    PHOTO_PAYM: 'PHOTO_PAYM',
    NP_METHOD: 'NP_METHOD',
    TYPE_NP: '–Ω–æ–≤–∞—è –ø–æ—á—Ç–∞',
    TYPE_UP: '—É–∫—Ä–ø–æ—à—Ç–∞',
    TYPE_OTHER: '–ø—Ä–æ—á–µ–µ',
    CLIENT_NAME: 'NAME_CLIENT',
    CLIENT_PHONE: 'PHONE_CLIENT',
    NP_DELIV: 'NP_DELIV',
    NP_CITY: 'NP_CITY',
    NP_WH: 'NP_WH',
    NP_STREET: 'NP_STREET',
    NP_HOUSE: 'NP_HOUSE',
    NP_FLAT: 'NP_FLAT',
    UP_INDEX: 'UP_INDEX',
    ITEM: 'ITEM',
    SIZE: 'SIZE',
    QTY: 'QTY',
    SEND: 'SEND',
    CREATED: 'CREATED'
}

function msgCancelOrder() {
    return '\n\nüõëüîô  –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –Ω–∞—á–∞–ª—É: ' + states.HOME
}

function msgGoToHome() {
    return '\n\nüîô  –ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ' + states.HOME
}

app.get('/', async (req, res) => {
    res.send('App is working now')
})

app.post('/reload', async (rec, res) => {
    await reloadUserConfByExternalRequest()
    res.json({status: 'ok'})
})

app.post('/updateImagesOnServer', async (rec, res) => {
    await updateImagesOnServer()
    res.json({status: 'ok'})
})

app.post('/new-message', async (req, res) => {
    const message = req.body?.message ?? req.body?.edited_message
    const phonePartner = message?.contact?.phone_number?.trim()
    const photo = message?.photo ? message.photo[0] : null
    const chatId = message?.chat?.id
    let messageText = message?.text?.trim()
    console.info('====================')
    console.info(JSON.stringify(req.body))
    console.info('====================')
    if ((!messageText && !phonePartner && !photo) || !chatId) {
        return res.sendStatus(400)
    }

    let actState

    switch (messageText) {
        case MSG_CLEAR:
        case states.HOME:
            actState = states.HOME
            break
        case states.HELP:
            actState = states.HELP
            break
        case states.ABOUT:
            actState = states.ABOUT
            break
        case MSG_AVAIL:
            actState = states.AVAIL
            break
        case MSG_NEW_ORDER:
        case states.NEW:
            actState = states.NEW
            break
        default:
            if (!users[chatId]?.state) {
                actState = states.HOME
            } else {
                actState = users[chatId].state
            }
    }

    console.log({actState, messageText})

    switch (actState) {
        case states.HELP :
            users[chatId] = {state: states.HELP}
            let msgHelp = '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ' + TELEGRAM_SUPPORT + ' —Å–ª—É—á–∞—è—Ö:\n' +
                ' ¬∑ —Å–±–æ—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞;\n' +
                ' ¬∑ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É (24 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–∏–∏ –¥–Ω–∏).\n' +
                '‚úì –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.\n' +
                '‚úì –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã/–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã.\n' +
                '‚úì –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏.\n' +
                '‚úì –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ.\n' +
                '‚úì –ü–æ–∏—Å–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í –ø–æ–∏—Å–∫–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤: –Ω–∞–ø—Ä–∏–º–µ—Ä, "–º–∞—Ä–∏ –∫–æ–∂" –Ω–∞–π–¥–µ—Ç –º–æ–¥–µ–ª—å "–º–∞—Ä–∏—Å–∞.–µ–≤—Ä–æ" —Ü–≤–µ—Ç–∞ "—á–µ—Ä.–∫–æ–∂".\n' +
                '‚úì –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤–≤–æ–¥–æ–º 5-—Ç–∏ —Ü–∏—Ñ—Ä.\n' +
                '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –±–æ—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏' +
                msgGoToHome()
            await sendMessage(chatId, msgHelp)
            break

        case states.ABOUT:
            users[chatId] = {state: states.ABOUT}
            let msgAbout = '–ú—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω "–°–¢–ò–õ–¨–ù–ê–Ø –û–ë–£–í–¨" - —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ñ–ï–ù–°–ö–û–ô –∫–æ–∂–∞–Ω–æ–π –æ–±—É–≤–∏.\n' +
                'üåé–°–∞–π—Ç: https://oba.com.ua\n' +
                'üèÜTelegram: https://t.me/artshoesua\n' +
                'ü§≥Instagram: https://www.instagram.com/artshoes.ua/\n' +
                'üîé–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å—ã–ª–æ–∫: ' + process.env.URL_TTN +
                msgGoToHome()
            await sendMessage(chatId, msgAbout)
            break

        case states.AVAIL:
            users[chatId] = {state: states.AVAIL}
            if (messageText === MSG_AVAIL) {
                await extractDataFromTableOrCache(true)
                await sendMessage(
                    chatId,
                    '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (5 —Ü–∏—Ñ—Ä) –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–æ–¥–µ–ª—å-—Ü–≤–µ—Ç: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–µ –ø–æ–¥—Ä—è–¥)' +
                    msgGoToHome()
                )
            } else {
                await extractDataFromTableOrCache()
                    .then(
                        async () => {
                            const MAX_ITEMS_LISTED = 50
                            let dictItems
                            let isArticul
                            if (messageText.match('^[0-9]{5}$')) {
                                dictItems = await getArrFromStock(COL_STK_ARTICUL)
                                isArticul = true
                            } else {
                                dictItems = await getArrFromStock(COL_STK_MODEL_AND_COLOUR)
                                isArticul = false
                            }
                            let item = messageText.toLowerCase()
                            if (!isLegalInputForRegExp(item)) {
                                await sendMessage(chatId, '–ù–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥' + msgGoToHome())
                                return
                            }
                            let actInd = includesIgnoringCase(dictItems, item)
                            if (actInd === false) {
                                let found = filterArray(dictItems, item, true)
                                let sizeFound = found?.length
                                if (!found || sizeFound === 0) {
                                    let msgNotFound = isArticul
                                        ? '–í–≤–µ–¥–µ–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª \'' + item + '\' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥'
                                        : '–í–≤–µ–¥–µ–Ω—ã–π —Ç–µ–∫—Å—Ç \'' + item +
                                        '\' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ. –ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥'
                                    await sendMessage(chatId, msgNotFound + msgGoToHome())
                                } else if (sizeFound > MAX_ITEMS_LISTED) {
                                    await sendMessage(chatId, '–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. ' +
                                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥' + msgGoToHome())
                                } else {
                                    await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–∞–π–¥–µ–Ω–æ ' +
                                        sizeFound + ')',
                                        composeButtonsFromArray(found))
                                }
                            } else {
                                let tuple = arrStk[actInd]
                                let actArt = tuple[COL_STK_ARTICUL - 1]
                                if (
                                    actArt !== item &&
                                    tuple[COL_STK_MODEL_AND_COLOUR - 1] !== item
                                ) {
                                    await extractDataFromTableOrCache(true).then(
                                        () => sendMessage(chatId, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä', composeButtonsFromArray([item]))
                                    )
                                }
                                let avail = ''
                                SIZES.forEach(
                                    (size, i) =>
                                        avail += tuple[COL_STK_SISE_L - 1 + i] > 0
                                            ? '\n' + '   ‚úì' + size + ':  ' + tuple[COL_STK_SISE_L - 1 + i]
                                            : ''
                                )
                                let msgWhenPhotoExist = arrImg.includes(actArt)
                                    ? '<a href="' + configMode.app.url + '/images/' + actArt + '.jpg' + '"> ‚Äè </a>'
                                    : ''
                                let msg = actArt + '\n' +
                                    tuple[COL_STK_MODEL - 1] + ' (' + tuple[COL_STK_COLOUR - 1] + ')' +
                                    (avail || '\n–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏') + '\n' +
                                    '–¶–µ–Ω–∞ ' + tuple[COL_STK_PRICE_ONE - 1] + ' / ' + tuple[COL_STK_PRICE_MANY - 1] + ' –≥—Ä–Ω' + '\n' +
                                    '–°–µ–∑–æ–Ω ' + tuple[COL_STK_SEASON - 1].toLowerCase() + '\n' +
                                    userConf[IND_USER_CONF_MSG_AVAIL] +
                                    msgWhenPhotoExist +
                                    msgGoToHome()
                                await sendMessage(chatId, msg, {parse_mode: 'HTML'})
                            }
                        }
                    )
            }
            break

        case states.HOME:
            users[chatId] = {state: states.HOME}
            let msgHome = '‚òÄ–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ Telegram-–±–æ—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∏–ª—å–Ω–æ–π –∂–µ–Ω—Å–∫–æ–π –æ–±—É–≤–∏.\n' +
                '‚ùì–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ' + states.HELP + '\n' +
                'üíÅ–ü–æ–¥–¥–µ—Ä–∂–∫–∞: ' + TELEGRAM_SUPPORT + '\n' +
                '‚Ñπ–ü—Ä–æ –∫–æ–º–ø–∞–Ω–∏—é: ' + states.ABOUT +
                msgGoToHome()
            await sendMessage(chatId, msgHome, composeInitButtons())
            break

        case states.NEW:
            users[chatId] = {state: states.PHONE_PARTNER, order: null}
            await sendMessage(chatId, '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø–æ–ª–æ–≥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:\n' +
                ' - –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞;\n' +
                ' - —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã;\n' +
                ' - —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ (–ù–æ–≤–∞—è –ü–æ—á—Ç–∞/–£–∫—Ä–ø–æ—à—Ç–∞) –∏ –º–µ—Ç–æ–¥ (–æ—Ç–¥–µ–ª–µ–Ω–∏–µ/–ø–æ—á—Ç–æ–º–∞—Ç/–¥–≤–µ—Ä–∏) –¥–ª—è –ù–æ–≤–æ–π –ü–æ—á—Ç—ã;\n' +
                ' - –≥–æ—Ä–æ–¥ –∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ/–ø–æ—á—Ç–æ–º–∞—Ç –ù–æ–≤–æ–π –ü–æ—á—Ç—ã;\n' +
                ' - –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø—Ä–∏ –∞–¥—Ä–µ—Å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã;\n' +
                ' - –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –£–∫—Ä–ø–æ—à—Ç–æ–π;\n' +
                ' - –∞—Ä—Ç–∏–∫—É–ª, —Ä–∞–∑–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ ' + MAX_POSITION_IN_ORDER + ' –ø–∞—Ä.)\n\n' +
                '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                composeAuthButtons())
            break

        case states.PHONE_PARTNER:
            if (!isValidPhonePartner(phonePartner)) {
                await sendMessage(chatId, '–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. ' +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã–π –Ω–æ–º–µ—Ä.\n' +
                    '–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É ' +
                    TELEGRAM_SUPPORT + msgCancelOrder())
            } else {
                users[chatId].order = {}
                users[chatId].order.phonePartner = phonePartner.substring(1)
                users[chatId].state = states.DELIV_TYPE
                await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', composeTypeButtons())
            }
            break

        case states.DELIV_TYPE:
            switch (messageText) {
                case DELIV_TYPE_NP:
                    users[chatId].order.delivType = DELIV_TYPE_NP
                    break
                case DELIV_TYPE_NP_POD:
                    users[chatId].order.delivType = DELIV_TYPE_NP_POD
                    break
                case DELIV_TYPE_UP:
                    users[chatId].order.delivType = DELIV_TYPE_UP
                    break
                /*case DELIV_TYPE_OTHER:
                    users[chatId].order.delivType = null
                    break*/
                default:
                    await sendMessage(chatId, '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö' +
                        msgCancelOrder(), composeTypeButtons())
            }
            users[chatId].state = states.PHOTO_PAYM
            await sendMessage(chatId, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–ø–ª–∞—Ç—ã')
            break

        case states.PHOTO_PAYM:
            if (!await isValidPhotoPaym(photo)) {
                await sendMessage(chatId,
                    '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–ø–ª–∞—Ç—ã (–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ –≤–∏–¥–µ —Å–∫—Ä–µ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é)' +
                    TELEGRAM_SUPPORT + msgCancelOrder())
            }
            switch (users[chatId].order.delivType) {
                case DELIV_TYPE_NP:
                case DELIV_TYPE_NP_POD:
                    users[chatId].state = states.NP_METHOD
                    await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã', composeNPmethodButtons())
                    break
                case DELIV_TYPE_UP:
                    users[chatId].state = states.CLIENT_NAME
                    await sendMessage(chatId, '–§–∞–º–∏–ª–∏—è –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (2 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)')
                    break
                /*case DELIV_TYPE_OTHER:
                    users[chatId].state = states.ITEM
                    await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
                    break*/
                default:
                    await sendMessage(chatId, '–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö' +
                        msgCancelOrder(), composeTypeButtons())
            }
            break

        case states.NP_METHOD:
            if (!isValidNPmethod(messageText)) {
                await sendMessage(chatId, '–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö' +
                    msgCancelOrder(), composeNPmethodButtons())
            } else {
                users[chatId].order.npMethod = messageText
                users[chatId].state = states.CLIENT_NAME
                let msg = messageText === NP_METHOD_DOOR
                    ? '–§–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–∞ (3 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)'
                    : '–§–∞–º–∏–ª–∏—è –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (2 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)'
                await sendMessage(chatId, msg)
            }
            break

        case states.CLIENT_NAME:
            let nameClient = makeFirstLetterCapital(messageText)
            if (!isClientNameValid(nameClient, users[chatId].order.npMethod)) {
                let msg = users[chatId].order.npMethod === NP_METHOD_DOOR
                    ? '–§–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–∞ (3 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).'
                    : '–§–∞–º–∏–ª–∏—è –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (2 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).'
                msg += ' —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—á–Ω—ã–µ'
                await sendMessage(chatId, '–ò–º—è ' + nameClient + ' –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    msg + msgCancelOrder())
            } else {
                users[chatId].order.nameClient = nameClient
                users[chatId].state = states.CLIENT_PHONE
                await sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 067*******, 10 —Ü–∏—Ñ—Ä')
            }
            break

        case states.CLIENT_PHONE:
            if (!isClientPhoneValid(messageText)) {
                await sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω ' + messageText + ' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 067*********: 10 —Ü–∏—Ñ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤' +
                    msgCancelOrder())
            } else {
                users[chatId].order.phoneClient = CODE_UA + messageText
                if (users[chatId].order.delivType === DELIV_TYPE_UP) {
                    users[chatId].state = states.UP_INDEX
                    await sendMessage(chatId, '–ò–Ω–¥–µ–∫—Å')
                } else {
                    users[chatId].state = states.NP_CITY
                    await sendMessage(chatId, '–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ ' +
                        '(–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤)')
                }
            }
            break

        case states.NP_CITY:
            const MAX_CITIES_LISTED = 15
            let city = makeFirstLetterCapital(messageText)
            if (!isLegalInputForRegExp(city)) {
                await sendMessage(chatId, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥' +
                    msgCancelOrder())
                return
            }
            const retrievedCities = await retrieveCities()
            if (!includesIgnoringCase(retrievedCities, city)) {
                let found = filterArray(retrievedCities, city)
                let sizeFound = found?.length
                if (!found || sizeFound === 0) {
                    await sendMessage(chatId, '–í–≤–µ–¥–µ–Ω—ã–π —Ç–µ–∫—Å—Ç \'' + city +
                        '\' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ. –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥' +
                        msgCancelOrder())
                } else if (sizeFound > MAX_CITIES_LISTED) {
                    await sendMessage(chatId, '–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. ' +
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥' + msgCancelOrder())
                } else {
                    await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–∞–π–¥–µ–Ω–æ ' +
                        sizeFound + ')',
                        composeButtonsFromArray(found))
                }
            } else {
                users[chatId].order.npCity = city
                if (users[chatId].order.npMethod === NP_METHOD_DOOR) {
                    users[chatId].state = states.NP_STREET
                    await sendMessage(chatId, '–£–ª–∏—Ü–∞ (–Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)')
                } else {
                    users[chatId].state = states.NP_WH
                    await sendMessage(chatId,
                        '–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è/–ø–æ—á—Ç–æ–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                }
            }
            break

        case states.NP_WH:
            if (!isNpWhValid(messageText)) {
                await sendMessage(chatId, '–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è/–ø–æ—á—Ç–æ–º–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ' + msgCancelOrder())
            } else {
                users[chatId].order.npWh = messageText
                users[chatId].state = states.ITEM
                await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
            }
            break

        case states.NP_STREET:
            users[chatId].order.npStreet = messageText
            users[chatId].state = states.NP_HOUSE
            await sendMessage(chatId, '–î–æ–º')
            break

        case states.NP_HOUSE:
            users[chatId].order.npHouse = messageText
            users[chatId].state = states.NP_FLAT
            await sendMessage(chatId, '–ö–≤–∞—Ä—Ç–∏—Ä–∞')
            break

        case states.NP_FLAT:
            users[chatId].order.npFlat = messageText
            users[chatId].state = states.ITEM
            await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
            break

        case states.UP_INDEX:
            if (!isUpIndexValid(messageText)) {
                await sendMessage(chatId, '–ò–Ω–¥–µ–∫—Å ' + messageText +
                    ' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' + '–ò–Ω–¥–µ–∫—Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –£–∫—Ä–ø–æ—à—Ç—ã: 5 —Ü–∏—Ñ—Ä.\n' +
                    '–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É ' +
                    TELEGRAM_SUPPORT + msgCancelOrder())
            } else {
                users[chatId].order.upIndex = messageText
                users[chatId].state = states.ITEM
                await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
            }
            break

        case states.ITEM:
            if (!isItemValid(messageText)) {
                await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª ' + messageText + ' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (5 —Ü–∏—Ñ—Ä)' + msgCancelOrder())
            } else {
                let pos = users[chatId].order.pos ?? 0
                pos++
                users[chatId].order.pos = pos
                users[chatId].order['item' + pos] = messageText
                users[chatId].state = states.SIZE
                await sendMessage(chatId, '–†–∞–∑–º–µ—Ä', composeSizeButtons())
            }
            break

        case states.SIZE:
            let size = parseInt(messageText)
            if (!isSizeValid(size, SIZES)) {
                await sendMessage(chatId, '–†–∞–∑–º–µ—Ä ' + size + ' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–†–∞–∑–º–µ—Ä (—á–∏—Å–ª–æ –æ—Ç ' + SIZES[0] + ' –¥–æ ' + SIZES[SIZES.length - 1] + ')' +
                    msgCancelOrder(), composeSizeButtons())
            } else {
                let pos = users[chatId].order.pos
                users[chatId].order['size' + pos] = size
                users[chatId].state = states.QTY
                await sendMessage(chatId, '–ö–æ–ª-–≤–æ', composeQtyButtons(MAX_QTY_IN_POSITION))
            }
            break

        case states.QTY:
            let qty = parseInt(messageText)
            if (!isQtyValid(qty, MAX_QTY_IN_POSITION)) {
                await sendMessage(chatId,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ' + qty + ' –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é.\n' +
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ ' + MAX_QTY_IN_POSITION + msgCancelOrder(),
                    composeQtyButtons(MAX_QTY_IN_POSITION))
            } else {
                let pos = users[chatId].order.pos
                users[chatId].order['qty' + pos] = qty
                users[chatId].state = states.SEND
                if (pos === MAX_POSITION_IN_ORDER) {
                    await sendMessage(chatId, '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?',
                        composOrderConfirmButtons())
                } else {
                    await sendMessage(chatId, '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?',
                        composOrderConfirmButtons(true))
                }
            }
            break

        case states.SEND:
            switch (messageText) {
                case MSG_ADD_POSITION:
                    users[chatId].state = states.ITEM
                    await sendMessage(chatId, '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞')
                    break
                case MSG_SEND:
                    users[chatId].state = states.CREATED
                    let dt = new Date()
                    users[chatId].order.createdAt = dt
                    let orderId = generateOrderId(users, dt)
                    users[chatId].order.orderId = orderId
                    let orders = users[chatId].orders ?? []
                    orders.push(users[chatId].order)
                    users[chatId].orders = orders
                    console.debug(JSON.stringify(users))
                    await sendMessage(chatId, orderId + '\n–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n' +
                        '–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ (–∫—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π) ' +
                        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–ª–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n' +
                        '–í–∞–∂–Ω–æ: –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É ' +
                        TELEGRAM_SUPPORT + ' –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –∑–∞–∫–∞–∑–∞!' + msgGoToHome())
                    await placeOrder(docMain, users[chatId].order)
                    break
                case MSG_CLEAR:
                    users[chatId].state = states.HOME
                    await sendMessage(chatId, '–ó–∞–∫–∞–∑ —Å–±—Ä–æ—à–µ–Ω' + msgGoToHome())
                    break
                default:
                    let pos = users[chatId].order.pos
                    if (pos === MAX_POSITION_IN_ORDER) {
                        await sendMessage(chatId, '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?' +
                            msgCancelOrder(), composOrderConfirmButtons())
                    } else {
                        await sendMessage(chatId, '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?' +
                            msgCancelOrder(), composOrderConfirmButtons(true))
                    }
            }
            break

        default:
            console.log('default for messageText ' + messageText)
            await sendMessage(chatId, '–û—Ç–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' +
                msgGoToHome() + '.\n–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ ' + states.HELP +
                '.\n–ü–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É ' + TELEGRAM_SUPPORT)
    }

    async function sendMessage(chatId, text, options) {
        try {
            await axios.post(TELEGRAM_URI_SEND_MESSAGE, {
                chat_id: chatId, text: text, ...options
            })
            res.send('Done')
        } catch (e) {
            console.log(e)
            res.send(e)
        }
    }

    async function sendPhoto(chatId, photo, caption, options) {
        try {
            await axios.post(TELEGRAM_URI_PHOTO, {
                chat_id: chatId, photo: photo, caption: caption, ...options
            })
            res.send('Done')
        } catch (e) {
            console.log(e)
            res.send(e)
        }
    }

})

async function reloadUserConfByExternalRequest() {
    await wsBooking.reloadInfo()
    await reloadUserConf()
    console.log('reloaded externally')
}

async function loadDuringStartup() {
    await reloadStk()
    await reloadUserConf()
    await reloadImg()
}

async function extractDataFromTableOrCache(isForce) {
    let dtNow = new Date()
    if (isForce || dtNow.getTime() - ctx.reload_stk_last_date.getTime() > RELOAD_STK_MS) {
        await wsBooking.reloadInfo()
        await reloadStk()
        ctx.reload_stk_last_date = dtNow
    }
    console.log('extractDataFromTableOrCache done with reload_stk_last_date = ' + ctx.reload_stk_last_date)
}

async function reloadStk() {
    arrStk = await wsBooking.getDataRangeBySheet(SH_STK, ADDR_STK_DATA)
    console.log('reloadStk done')
}

export async function reloadImg() {
    const arrImgId = await wsImageScanner.getDataRangeBySheet(SH_IMG, ADDR_IMG_DATA)
        .then(arr => arr.filter(
            row => row[IND_IMG_ART] && row[IND_IMG_ART] !== '-'
        )).then(
            arr => uniqueTwoDimArr(arr, IND_IMG_ART)
        )
    arrImg = arrImgId.map(row => row[IND_IMG_ART])
    console.log('reloadImg done with ' + arrImg.length)
    return {arrImgId}

}

async function reloadUserConf() {
    userConf = await wsBooking.getDataRangeBySheet(SH_DICT, ADDR_DICT_USER_CONF)
        .then(arr => convert2DimArrayInto1Dim(arr))
    console.log('reloadUserConf done ')
}

async function retrieveCities() {
    let cities = await wsBooking.getDataRangeBySheet(SH_DICT, ADDR_DICT_CITIES)
        .then(err => convert2DimArrayInto1Dim(err))
    console.log('retrieveCities done')
    return cities
}

function getArrFromStock(col) {
    let arr = arrStk.map(row => row[col - 1])
    console.log('getArrFromStock by ' + col)
    return arr
}

let wsBooking = null
let wsImageScanner = null
let arrStk = null
let arrImg = null
let userConf = null

const PORT = configMode.app.port

app.listen(PORT, async () => {
    console.log(JSON.stringify(configMode))
    console.log(`Server running on port ${PORT}`)
    //const a = await TblBooking.createInstance()
    //const b = await TblImageScanner.createInstance()
    wsBooking = await TblBooking.createInstance()
    wsImageScanner = await TblImageScanner.createInstance()
    await loadDuringStartup()
})
